library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

-- pMem interface
entity pMem is
  port(
    clk   : in std_logic; 
    pAddr : in unsigned(8 downto 0);
    pAddr_store : in unsigned(8 downto 0);
    pData : out unsigned(15 downto 0);
    pStore: in std_logic;
    pData_in: in unsigned(15 downto 0));
end pMem;

architecture Behavioral of pMem is

-- program Memory
type p_mem_t is array (0 to 1023) of unsigned(15 downto 0);
constant p_mem_c : p_mem_t :=
  ( --DELAY_TIMER 0
    x"0000", --NOP
    x"0100", --LOAD, Gr0, 01, 0
    x"0001", --FFFF
    x"3100", --SUBI, Gr0, 01, 0 
    x"0001", --0001
    x"9100", --CMPI, Gr0, 01, 0
    x"0000", --0000
    x"70FB", --BNE, Gr0, 00, $DELAY_TIMER ($2) (Hoppa -5)  --ok 

   --GAME_LOOP 8
    x"00BA", --LOAD, GR0, 00, $direction ($BC)        --Game loop start 
    x"90BE", --CMPI, Gr0, 00, $value rep up ($C0)
    x"5006", --BEQ, Gr0,00,$CASE_UP ($10)
    x"90BF", --CMPI, Gr0, 00, $value rep down ($C1)
    x"5013", --BEQ, Gr0,00,$CASE_Down ($23)
    x"90C0", --CMPI, Gr0, 00, $value rep left ($C2)
    x"502F", --BEQ, Gr0, 00, $CASE_Left ($4B)
    x"90C1", --CMPI, GR0, 00, $value rep right ($C3)
    x"501E", --BEQ, Gr0, 00, $CASE_Right ($37) -- ok
    --CASE_UP 17
    x"00BF", --LOAD, GR0, 00, $value for down ($C1)
    x"90BB", --CMPI, GR0, 00, $last direction ($BD)
    x"500C", --BEQ, Gr0, 00, $CASE_DOWN ($23)
    x"10BB", --STORE, gr0, 00, $last_direction ($BD)
    x"00B8", --LOAD, Gr0, 00, $headpos ($BA)  ----
    x"04B8", --LOAD, GR1, 00, $headpos ($BA)  ----
    x"4500", --ANDI, Gr1, 01, 0         
    x"003C", --003C
    x"9505", --CMPI, Gr1, 01, 0                   LÃ¤ser av nollor!!!
    x"0000", --0000
    x"503E", --BEQ, Gr0, 00, $END ($B8)    
    x"3100", --SUBI, Gr0, 01, 0
    x"0004", --0004
    x"10B8", --STORE, Gr0, 00, $headpos ($BA)
    x"602C", --BRA COLLISION_CONTROL ($5F) --ok
 
    --CASE_DOWN 32
    x"00BE", --LOAD, GR0, 00, $value for up ($C0)
    x"90BB", --CMPI, GR0, 00, $last_direction ($BD)
    x"50EE", --BEQ, Gr0, 00, $CASE_UP ($10)
    x"10BB", --STORE, gr0, 00, $last_direction($BE)
    x"00B8", --LOAD, Gr0, 00, $headpos ($BA)      ----
    x"04B8", --LOAD, GR1, 00, $headpos ($BA)      ----
    x"4500", --ANDI, Gr1, 01, 0         
    x"003C", --003C
    x"9505", --CMPI, Gr1, 01, 0  
    x"0038", --0038
    x"502F", --BEQ, Gr0, 00, $END ($B8)    
    x"2100", --ADDI, Gr0, 01, 0
    x"0004", --0004
    x"10B8", --STORE, Gr0, 00, $headpos ($BA)
    x"601D", --BRA COLLISION_CONTROL ($5F) --ok
    
    --CASE_RIGHT 47
    x"00C0", --LOAD, GR0, 00, $value for left ($C2)
    x"90BB", --CMPI, GR0, 00, $last_direction ($BD)
    x"500C", --BEQ, Gr0, 00, $CASE_LEFT ($4B)
    x"10BB", --STORE, gr0, 00, $last_direction ($BD)
    x"00B8", --LOAD, Gr0, 00, $headpos ($BA)     ----
    x"04B8", --LOAD, GR1, 00, $headpos ($BA)     ----
    x"4500", --ANDI, Gr1, 01, 0         
    x"07C0", --07C0
    x"9505", --CMPI, Gr1, 01, 0 
    x"0500", --500
    x"5020", --BEQ, Gr0, 00, $END ($B8)
    x"2100", --ADDI, Gr0, 01, 0
    x"0040", --0040
    x"10B8", --STORE, Gr0, 00, $headpos ($BA)
    x"600E", --BRA COLLISION_CONTROL ($5F) -- ok

    --CASE_LEFT 62
    x"00C1", --LOAD, GR0, 00, $value for right ($C3)
    x"90BB", --CMPI, GR0, 00, $last_direction ($BD)
    x"50EE", --BEQ, Gr0, 00, $CASE_RIGHT ($37)
    x"10BB", --STORE, gr0, 00, $last_direction ($BD)
    x"00B8", --LOAD, Gr0, 00, $headpos ($BA)     ----
    x"04B8", --LOAD, GR1, 00, $headpos ($BA)     ----
    x"4500", --ANDI, Gr1, 01, 0         
    x"07C0", --07C0
    x"9505", --CMPI, Gr1, 01, 0 
    x"0000", --0000
    x"5011", --BEQ, Gr0, 00, $END ($B8)
    x"3100", --SUBI, Gr0, 01, 0
    x"0040", --0040
    x"10B8", --STORE, Gr0, 00, $headpos ($BA)  --ok
 
 
    --COLLISION_CONTROL 76
         --CMP IF HEAD == FISH 
    x"00B8", --LOAD, Gr0, 00, $headpos ($BA)
    x"90B7", --CMPI, Gr0, 00, $FISHPOS
    x"5018", --BEQ, Gr0, 00, $INC_AL ($79)
         --LOAD INDEX
    x"0100", --LOAD, Gr0, 01, 0 
    x"00C3", --INDEX
    x"10BC", --STORE, Gr0, 00, $index ($BE)
 
         --CMP COORDS 
    x"02BC", --LOAD, Gr0, 10, $INDEX ($BF)
    x"4100", --ANDI, Gr0, 01, 0
    x"03FC", --03FC
    x"90B8", --CMPI, Gr0, 00, $HEADPOS ($BF)
    x"5002",  --BEQ, Gr0, 00, $END
    x"6002", --BRA, Gr0, 00, $COLLISION_CONTROL_2 ($6D) --
    x"60A8", --BRA, Gr0, 00, $DELAY_TIMER ($00)
    X"605A", --BRA, Gr0, 00, $END

    --COLLISION_CONTROL_2 90
 
         --INC INDEX
    x"00BC", --LOAD, Gr0, 00, $index ($BE)
    x"2100", --ADDI, Gr0, 01, 0
    x"0001", --0001
    x"10BC", --STORE, Gr0, 00, $index ($BE)
 
 
    x"06BC", --LOAD, Gr1, 10, $index ($BE)
    x"9500", --CMPI, Gr1, 01, 0
    x"0002", --0002
    x"5027", --BEQ, Gr0, 00, $MOVE_AL ($96) --
    x"4500", --ANDI, Gr1, 01, 0
    x"03FC",  --03FC  
    x"94B8", --CMPI, Gr1, 00, $HEADPOS ($BF)
    x"50F3", --BEQ, Gr0, 00, $END ($96) --
         --JMP BACK AND DO NEXT COORD
    x"60F3", --BRA, Gr0, 00, $COLLISION_CONTROL_2 ($6D) --
 
 
 
    --INC_AL 103
    x"08B8", --LOAD, Gr2, 00, $headpos ($BA)
 
         --RESET INDEX 
    x"0100", --LOAD, Gr0, 01, 0 
    x"00C3", --00C3 VAL FOR INDEX 
    x"10BC", --STORE, Gr0, 00, $index ($BE)
 
           --STORE HEAD 
    x"06BC", --LOAD, Gr1, 10, $index ($BE)
    x"1ABC", --STORE, Gr2, 10, $index ($BE)
    x"2500", --ADDI, Gr1, 01, 0
    x"0001", --0001    -- CHANGE FROM HEAD TO BODY
 
    --INC_AL_2 111
           --INC INDEX 
    x"08BC", --LOAD, Gr2, 00, $index ($BE)
    x"2900", --ADDI, Gr2, 01, 0
    x"0001", --0001
    x"18BC", --STORE, Gr2, 00, $index ($BE)
 
 
    x"02BC", --LOAD, Gr0, 10, $index  ($BE)
    x"16BC", --STORE, Gr1, 10, $index ($BE)
    x"9100", --CMPI, Gr0, 01, 0
    x"0002", --0002
    x"500A", --BEQ, Gr0, 00, $ADD_aL_END ($AF) --ok
 
 
         --INC INDEX
    x"08BC", --LOAD, Gr2, 00, $index ($BE)
    x"2900", --ADDI, Gr2, 01, 0
    x"0001", --0001
    x"18BC", --STORE, Gr2, 00, $index ($BE)
 
 
    x"06BC", --LOAD, Gr1, 10, $index ($BE)
    x"12BC", --STORE, Gr0, 10, $index ($BE)
    x"9500", --CMPI, Gr1, 01, 0
    x"0002", --0002
    x"5001", --BEQ, Gr0, 00, $ADD_aL_END ($AF) --
    x"60ED", --BRA, Gr0, 00, $INC_AL_2 ($83) --
 
 
    --ADD_aL_END 130
         --INC INDEX
    x"08BC", --LOAD, Gr2, 00, $index ($BE)
    x"2900", --ADDI, Gr2, 01, 0
    x"0001", --0001
    x"18BC", --STORE, Gr2, 00, $index ($BE)
    
         --ADD THE END
    x"0100", --LOAD, Gr0, 01, 0
    x"0002", --0002
    x"12BC", --STORE, Gr0, 10, $INDEX
 

    --MOVE_AL 137
         --LOAD INDEX
 
    x"0D00", --LOAD, Gr3, 01, 0
    x"00C3", --00C3 --
    x"1CBC", --STORE, Gr3, 00, $index ($BE)
 
 
    x"08B8", --LOAD, Gr2, 00, $headpos ($BA)
    x"02BC", --LOAD, Gr0, 10, $index ($BE)
    x"1ABC", --STORE, Gr2, 10, $index ($BE)
    x"2100", --ADDI, Gr0, 01, 0
    x"0001", --0001    -- CHANGE FROM HEAD TO BODY
 
 
    --MOVE_AL_2 145
    
         --INC INDEX
    x"08BC", --LOAD, Gr2, 00, $index ($BE)
    x"2900", --ADDI, Gr2, 01, 0
    x"0001", --0001
    x"18BC", --STORE, Gr2, 00, $index ($BE)
 
         --MOVE
    x"06BC", --LOAD, Gr1, 10, $index ($BE)
    x"9500", --CMPI, Gr1, 01, 0
    x"0002", --0002
    x"50BE", --BEQ, Gr0, 00, $DELAY_TIMER ($00) --
    x"12BC", --STORE, Gr0, 10, $index ($BE) --
 
         --INC INDEX
    x"08BC", --LOAD, Gr2, 00, $index ($BE)S
    x"2900", --ADDI, Gr2, 01, 0
    x"0001", --0001
    x"18BC", --STORE, Gr2, 00, $index ($BE)
 
         --MOVE
    x"02BC", --LOAD, Gr0, 10, $index ($BE)
    x"9100", --CMPI, Gr0, 01, 0
    x"0002", --0002
    x"50B6", --BEQ, Gr0, 00, $DELAY_TIMER 
    x"16BC", --STORE, Gr1, 10, $index ($BE)  -- 
    x"60ED", --BRA, Gr0, 00, $MOVE_AL_2 ($00)
 
 
 
    --NEW_FISH_POS 164
    x"F800", --GET_RANDOM, Gr2, 00, 0
    x"28B6", --ADDI, Gr2, 00, $RANDOM_VALUE
    x"18B6", --STORE, GR2, 00, $RANDOM_VALUE
    x"04B5", --LOAD, Gr1, 00, $COUNTER
    x"24C2", --ADDI, Gr1, 00, $const
    x"14B5", --STORE, Gr1, 00, $COUNTER
    x"9500", --CMPI, GR1, 01, 0
    x"0080", --80
    x"70F7", --BNE, Gr0, 00, $NEW_FISH_POS
 
 
    --NEW_FISH_POS_173
    x"4900", --ANDI, GR2, 01, 0
    x"07FC", --07FC
    x"18B7", --STORE, GR2, 00, $FISHPOS
    x"2900", --ADDI, Gr2, 01, 0 
    x"0003", --3
    x"18BB", --STORE, Gr2, 00, $LOCATION WHERE IT GETS DISPLAYED ON SCREEN ($B9)
    x"60AE", --BRA, Gr0, 00, $DELAY_TIMER ($00)
 
 
    --END 180
    X"C000", --HALT
    x"0000", --COUNTER  -B5
    x"0000", --RANDOM_VALUE -B6
    x"0000", --$fishpos B7 
    x"0000", --$headpos B8
    x"0000", --$lastpos B9
    x"0000", --$direction BA
    x"0000", --$last_direction BB
    x"00C3", --$index BC
    x"0001", --$temp BD
    x"0003", --$value for up BE
    x"0001", --$value for down BF
    x"0002", --$value for left C0
    x"0000", --$value for right C1
    x"0001", --const   C2

    --Vmem
    b"00000_01001_0110_00", -- C3
    b"00000_01000_0110_01",
    b"00000_00111_0110_01",
    b"00000_00110_0110_01",
    b"00000_00101_0110_01",
    b"00000_00000_0000_10",
    b"00000_00000_0000_10",
    others => (others => '0')
    );

signal p_mem : p_mem_t := p_mem_c;


begin  -- pMem
  pData <= p_mem(to_integer(pAddr));

  process(clk)
  begin
      if rising_edge(clk) then
        if pStore = '1' then
          p_mem(to_integer(pAddr)) <= pData_in;
        end if;       
      end if;
  end process;

end Behavioral;


--quit -sim; vcom ../*.vhd; vsim -voptargs=+acc work.uprogcpu_tb; do ../cpu_wave.do
--0000
--1: OP
--2: GRx+K2 adr
--3: TF reg / const
--4: TF reg / const